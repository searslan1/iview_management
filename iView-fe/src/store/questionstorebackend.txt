import { create } from 'zustand';
import axios from 'axios'; // Axios ya da fetch API kullanılabilir

const useQuestionListStore = create((set) => ({
    questions: [],

    // Soruları backend'den yükleme fonksiyonu
    loadQuestions: async () => {
        try {
            const response = await axios.get('/api/questions');
            set({ questions: response.data });
        } catch (error) {
            console.error('Failed to load questions:', error);
        }
    },

    // Soru ekleme fonksiyonu (backend'e ekleme)
    addQuestion: async (newQuestion) => {
        try {
            const response = await axios.post('/api/questions', newQuestion);
            set((state) => ({
                questions: [...state.questions, response.data], // Backend'den gelen eklenmiş veriyi state'e ekle
            }));
        } catch (error) {
            console.error('Failed to add question:', error);
        }
    },

    // Soru düzenleme fonksiyonu (backend'de güncelleme)
    editQuestion: async (updatedQuestion) => {
        try {
            const response = await axios.put(`/api/questions/${updatedQuestion.id}`, updatedQuestion);
            set((state) => ({
                questions: state.questions.map((q) => (q.id === updatedQuestion.id ? response.data : q)),
            }));
        } catch (error) {
            console.error('Failed to edit question:', error);
        }
    },

    // Soru silme fonksiyonu (backend'de silme)
    deleteQuestion: async (id) => {
        try {
            await axios.delete(`/api/questions/${id}`);
            set((state) => ({
                questions: state.questions.filter((q) => q.id !== id),
            }));
        } catch (error) {
            console.error('Failed to delete question:', error);
        }
    },

    // Soruları yeniden sıralama fonksiyonu
    reorderQuestions: async (activeId, overId) => {
        try {
            set((state) => {
                const activeIndex = state.questions.findIndex((q) => q.id === activeId);
                const overIndex = state.questions.findIndex((q) => q.id === overId);

                const newQuestions = [...state.questions];
                const [movedItem] = newQuestions.splice(activeIndex, 1);
                newQuestions.splice(overIndex, 0, movedItem);

                return { questions: newQuestions };
            });

            // Backend'e yeni sırayı gönder
            await axios.put('/api/questions/reorder', {
                questions: state.questions.map((q) => q.id), // Yeni sıralamayı gönder
            });
        } catch (error) {
            console.error('Failed to reorder questions:', error);
        }
    },
}));

export default useQuestionListStore;
